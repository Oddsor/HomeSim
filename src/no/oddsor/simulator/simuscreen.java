/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package no.oddsor.simulator;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.Timer;

import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import no.oddsor.simulator.db_tables.Path;
import no.oddsor.simulator.db_tables.Task;

/**
 *
 * @author Odd
 */
public class simuscreen extends javax.swing.JFrame {
    
    PainterPanel painter;
    int time;
    Timer timer;
    Map<Integer, Point> path;
    String currentMap = "appsketch.jpg";
    DatabaseHandler dbHandler;
    
    ArrayList<Task> tasks;
    
    
    /**
     * Creates new form simuscreen
     */
    public simuscreen() {
        
        initComponents();
        painter = new PainterPanel(currentMap);
        path = new HashMap<>();
        Dimension dim = painter.getDimensions();
        dim.height += 58;
        dim.width += 6;
        this.setSize(dim);
        this.setResizable(false);
        imgpane.add(painter);
        ActionListener timeListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                try{
                    Point p = painter.getLastPoint();
                    path.put(time, p);
                    time ++;
                }catch(Exception e){
                }
                timeField.setText("" + time);
            }
        };
        try {
            dbHandler = new DatabaseHandler();
        } catch (IOException ex) {
            dbHandler = null;
            ex.printStackTrace();
        }
        //TODO remove demo code
        Task.insertTask(new Task(1, "Sleep", 0, 5), dbHandler);
        Task.insertTask(new Task(2, "Make food", 0, 5), dbHandler);
        Task.insertTask(new Task(3, "Eat food", 0, 5), dbHandler);
        //===============
        tasks = Task.getTasks(dbHandler);
        Object[] es = new Object[tasks.size() + 2];
        es[0] = "No task";
        es[1] = "=======";
        for(int i = 0; i < tasks.size(); i++){
            es[i + 2] = tasks.get(i).taskName;
        }
        activityGoal.setModel(new DefaultComboBoxModel(es));
        painter.paintEndPoints(Path.getPaths(dbHandler));
        timer = new Timer(100, timeListener);
        timer.setInitialDelay(500);
        timeField.setText("0:00");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saver = new javax.swing.JButton();
        imgpane = new javax.swing.JPanel();
        startTimer = new javax.swing.JButton();
        timeField = new javax.swing.JTextField();
        activityGoal = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        saver.setText("Save");
        saver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saverActionPerformed(evt);
            }
        });

        imgpane.setBackground(new java.awt.Color(204, 51, 255));

        javax.swing.GroupLayout imgpaneLayout = new javax.swing.GroupLayout(imgpane);
        imgpane.setLayout(imgpaneLayout);
        imgpaneLayout.setHorizontalGroup(
            imgpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imgpaneLayout.setVerticalGroup(
            imgpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 489, Short.MAX_VALUE)
        );

        startTimer.setText("Start timer");
        startTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTimerActionPerformed(evt);
            }
        });

        timeField.setText("0:00:00");
        timeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeFieldActionPerformed(evt);
            }
        });

        activityGoal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Traversal", "Eating", "Sleeping", "Toilet" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 353, Short.MAX_VALUE)
                .addComponent(activityGoal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startTimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saver))
            .addComponent(imgpane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saver)
                    .addComponent(startTimer)
                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activityGoal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgpane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saverActionPerformed
        
        Task task = null;
        if(activityGoal.getSelectedIndex() > 1){
            task = Task.getTaskById(activityGoal.getSelectedIndex() - 2, dbHandler);
        }
        Iterator it = path.entrySet().iterator();
        String points = "";
        int startPointX = 0, startPointY = 0, endPointX = 0, endPointY = 0;
        int activityDuration = 0;
        boolean first = true;
        while(it.hasNext()){
            activityDuration++;
            Object ob = it.next();
            Entry<Integer, Point> p = (Entry<Integer, Point>) ob;
            if (first){
                startPointX = p.getValue().x;
                startPointY = p.getValue().y;
                first = false;
            }
            points += p.getKey() + ";" + p.getValue().x + ";" + p.getValue().y;
            if (it.hasNext()) points += "\n";
            else{
                endPointX = p.getValue().x;
                endPointY = p.getValue().y;
            }
        }
        activityDuration = activityDuration / 2;
        Path.insertPath(startPointX, startPointY, endPointX, endPointY, 
                task, points, dbHandler);
        painter.clearPoints();

        painter.paintEndPoints(Path.getPaths(dbHandler));
    }//GEN-LAST:event_saverActionPerformed

    private void startTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimerActionPerformed

        if(timer.isRunning()){
            timer.stop();
            System.out.println(path.toString());
            startTimer.setText("Start timer");
        }
        else{
            time = 0;
            timer.start();
            path.clear();
            startTimer.setText("Stop timer");
        }
    }//GEN-LAST:event_startTimerActionPerformed

    private void timeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeFieldActionPerformed

    }//GEN-LAST:event_timeFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(simuscreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(simuscreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(simuscreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(simuscreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new simuscreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox activityGoal;
    private javax.swing.JPanel imgpane;
    private javax.swing.JButton saver;
    private javax.swing.JButton startTimer;
    private javax.swing.JTextField timeField;
    // End of variables declaration//GEN-END:variables
}
